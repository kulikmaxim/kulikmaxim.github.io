(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _router = require('./utils/router');

var _router2 = _interopRequireDefault(_router);

var _routes = require('./routes/routes');

var _routes2 = _interopRequireDefault(_routes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var router = new _router2.default(_routes2.default);

document.getElementById('links').addEventListener('click', function (ev) {
    if (!ev.target.matches('a')) {
        return;
    }
    ev.preventDefault();

    var url = ev.target.getAttribute('href');
    window.location.hash = url;
});

},{"./routes/routes":6,"./utils/router":9}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CanvasView = function () {
    function CanvasView(options, state, eventBus) {
        _classCallCheck(this, CanvasView);

        this.options = options;
        this.eventBus = eventBus;
        this.state = state;
        this.init();
        this.render();
    }

    _createClass(CanvasView, [{
        key: 'init',
        value: function init() {
            this.canvas = document.createElement('canvas');
            this.context = this.canvas.getContext('2d');
            document.getElementById(this.options.container).appendChild(this.canvas);

            this.subscribeToClick();
            this.subscribeToTick();
        }
    }, {
        key: 'render',
        value: function render() {
            this.changeCanvasSizeAccordingState();

            this.context.clearRect(0, 0, this.options.width, this.options.height);
            this.context.beginPath();
            for (var i = 0; i < this.state.length; i++) {
                for (var j = 0; j < this.state[i].length; j++) {
                    if (this.state[i][j]) {
                        var pointX = j * this.options.squareSize;
                        var pointY = i * this.options.squareSize;

                        this.context.moveTo(pointX, pointY);
                        this.context.rect(pointX, pointY, this.options.squareSize, this.options.squareSize);
                    }
                }
            }
            this.context.stroke();
            this.context.fill();
        }
    }, {
        key: 'changeCanvasSizeAccordingState',
        value: function changeCanvasSizeAccordingState() {
            this.canvas.width = this.state[0].length * this.options.squareSize;
            this.canvas.height = this.state.length * this.options.squareSize;
        }
    }, {
        key: 'subscribeToClick',
        value: function subscribeToClick() {
            var _this = this;

            this.canvas.addEventListener('click', function (ev) {
                return _this.eventBus.trigger('view:cellChanged', _this.getCellByCoordinates(ev.offsetX, ev.offsetY));
            });
        }
    }, {
        key: 'getCellByCoordinates',
        value: function getCellByCoordinates(x, y) {
            return {
                row: Math.floor(y / this.options.squareSize),
                column: Math.floor(x / this.options.squareSize)
            };
        }
    }, {
        key: 'subscribeToTick',
        value: function subscribeToTick() {
            var _this2 = this;

            this.eventBus.on('stateManager:stateChanged', function (state) {
                _this2.state = state;
                _this2.render();
            });
        }
    }]);

    return CanvasView;
}();

exports.default = CanvasView;

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _gameLife = require('../utils/gameLife');

var _gameLife2 = _interopRequireDefault(_gameLife);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StateManager = function () {
    function StateManager(options, eventBus, storage) {
        _classCallCheck(this, StateManager);

        this.options = options;
        this.eventBus = eventBus;
        this.states = [];
        this.init();

        this.subscribeToChangeCell();
    }

    _createClass(StateManager, [{
        key: 'init',
        value: function init() {
            this.container = document.getElementById(this.options.container);
            this.render();
            this.initGameState();

            this.subscribeToClick();
            this.subscribeToChangeSpeed();
            this.subscribeToChangeSize();
        }
    }, {
        key: 'initGameState',
        value: function initGameState() {
            if (this.states.length) {
                return;
            }

            var state = [];
            for (var i = 0; i < this.options.height; i++) {
                state.push(Array(this.options.width).fill(false));
            }

            this.gameLife = new _gameLife2.default(state);
            this.states.push(state);
            this.stateIndex = this.states.length - 1;
        }
    }, {
        key: 'start',
        value: function start() {
            var _this = this;

            if (this.stateIndex !== this.states.length - 1) {
                this.gameLife.state = this.states[this.stateIndex];
                this.states.length = this.stateIndex + 1;
            }

            this.timer = setTimeout(function () {
                _this.gameLife.tick();
                _this.states.push(_this.gameLife.state);
                _this.eventBus.trigger('stateManager:stateChanged', _this.gameLife.state);
                _this.stateIndex = _this.states.length - 1;

                _this.start();
            }, this.options.speed.current);
        }
    }, {
        key: 'stop',
        value: function stop() {
            clearTimeout(this.timer);
            this.timer = null;
        }
    }, {
        key: 'render',
        value: function render() {
            var $$ = this.options.speed;
            var content = '<input type="button" value="<<" id="previous">\n        <input type="button" id="play" value="|>">\n        <input type="button" value=">>" id="next">\n        <br><br>\n        Width: <input type="number" data-size="width" value="' + this.options.width + '" step="1" min="0" max="30">\n        Height: <input type="number" data-size="height" value="' + this.options.height + '" step="1" min="0" max="20">\n        <br><br>\n        Speed: <input type="range" id="speed" min="' + $$.min + '" max="' + $$.max + '" step="' + $$.step + '" value="' + $$.current + '"' + ' list="speed-values">';

            this.container.innerHTML = content;
        }
    }, {
        key: 'subscribeToClick',
        value: function subscribeToClick() {
            var _this2 = this;

            this.container.addEventListener('click', function (ev) {
                if (ev.target.matches('#play')) {
                    if (_this2.timer) {
                        _this2.stop();
                        ev.target.value = '|>';
                    } else {
                        _this2.start();
                        ev.target.value = '||';
                    }
                }

                if (ev.target.matches('#previous')) {
                    var index = _this2.stateIndex > 0 ? --_this2.stateIndex : _this2.stateIndex;
                    _this2.eventBus.trigger('stateManager:stateChanged', _this2.states[index]);
                }

                if (ev.target.matches('#next')) {
                    var _index = _this2.stateIndex < _this2.states.length - 1 ? ++_this2.stateIndex : _this2.stateIndex;
                    _this2.eventBus.trigger('stateManager:stateChanged', _this2.states[_index]);
                }
            });
        }
    }, {
        key: 'subscribeToChangeSpeed',
        value: function subscribeToChangeSpeed() {
            var _this3 = this;

            this.container.addEventListener('change', function (ev) {
                if (ev.target.matches('input[type=range]')) {
                    _this3.options.speed.current = ev.target.value;
                }
            });
        }
    }, {
        key: 'subscribeToChangeSize',
        value: function subscribeToChangeSize() {
            var _this4 = this;

            this.container.addEventListener('input', function (ev) {
                if (ev.target.hasAttribute('data-size')) {
                    if (ev.target.getAttribute('data-size') === 'height') {
                        _this4.options.height = +ev.target.value;
                    } else {
                        _this4.options.width = +ev.target.value;
                    }

                    _this4.changeStateSize();
                }
            }, true);
        }
    }, {
        key: 'changeStateSize',
        value: function changeStateSize() {
            var state = this.states[this.stateIndex];
            state.length = this.options.height;

            for (var i = 0; i < this.options.height; i++) {
                if (!state[i]) {
                    state[i] = Array(this.options.width).fill(false);
                    continue;
                }

                state[i].length = this.options.width;
            }

            this.eventBus.trigger('stateManager:stateChanged', state);
        }
    }, {
        key: 'subscribeToChangeCell',
        value: function subscribeToChangeCell() {
            var _this5 = this;

            this.eventBus.on('view:cellChanged', function (_ref) {
                var row = _ref.row,
                    column = _ref.column;

                _this5.gameLife.state = _this5.states[_this5.stateIndex];
                _this5.gameLife.state[row][column] = !_this5.gameLife.state[row][column];
                _this5.eventBus.trigger('stateManager:stateChanged', _this5.gameLife.state);
            });
        }
    }, {
        key: 'currentState',
        get: function get() {
            return this.states[this.stateIndex];
        }
    }]);

    return StateManager;
}();

exports.default = StateManager;

},{"../utils/gameLife":8}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SVG_NS = 'http://www.w3.org/2000/svg';

var SvgView = function () {
    function SvgView(options, state, eventBus) {
        _classCallCheck(this, SvgView);

        this.options = options;
        this.eventBus = eventBus;
        this.state = state;
        this.init();
        this.render();
    }

    _createClass(SvgView, [{
        key: 'init',
        value: function init() {
            this.svg = document.createElementNS(SVG_NS, 'svg');
            document.getElementById(this.options.container).appendChild(this.svg);

            this.subscribeToClick();
            this.subscribeToTick();
        }
    }, {
        key: 'render',
        value: function render() {
            this.changeSvgSizeAccordingState();

            var $$ = this.options;
            this.svg.textContent = '';
            var rectangles = '';
            for (var i = 0; i < this.state.length; i++) {
                for (var j = 0; j < this.state[i].length; j++) {
                    if (this.state[i][j]) {
                        var x = j * $$.squareSize;
                        var y = i * $$.squareSize;

                        rectangles += '<rect x=\'' + x + '\' y=\'' + y + '\' width=\'' + $$.squareSize + '\' height=\'' + $$.squareSize + '\' class=\'svg-square\'/>';
                    }
                }
            }

            this.svg.innerHTML += rectangles;
        }
    }, {
        key: 'getCellByCoordinates',
        value: function getCellByCoordinates(x, y) {
            return {
                row: Math.floor(y / this.options.squareSize),
                column: Math.floor(x / this.options.squareSize)
            };
        }
    }, {
        key: 'changeSvgSizeAccordingState',
        value: function changeSvgSizeAccordingState() {
            this.svg.setAttribute('width', this.state[0].length * this.options.squareSize);
            this.svg.setAttribute('height', this.state.length * this.options.squareSize);
        }
    }, {
        key: 'subscribeToClick',
        value: function subscribeToClick() {
            var _this = this;

            this.svg.addEventListener('click', function (ev) {
                return _this.eventBus.trigger('view:cellChanged', _this.getCellByCoordinates(ev.offsetX, ev.offsetY));
            });
        }
    }, {
        key: 'subscribeToTick',
        value: function subscribeToTick() {
            var _this2 = this;

            this.eventBus.on('stateManager:stateChanged', function (state) {
                _this2.state = state;
                _this2.render();
            });
        }
    }]);

    return SvgView;
}();

exports.default = SvgView;

},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextView = function () {
    function TextView(options, state, eventBus) {
        _classCallCheck(this, TextView);

        this.options = options;
        this.eventBus = eventBus;
        this.state = state;
        this.init();
        this.render();
    }

    _createClass(TextView, [{
        key: 'init',
        value: function init() {
            this.container = document.createElement('pre');
            this.container.className = 'textView';
            document.getElementById(this.options.container).appendChild(this.container);

            this.subscribeToTick();
            this.subscribeToClick();
        }
    }, {
        key: 'render',
        value: function render() {
            var content = '';
            for (var i = 0; i < this.state.length; i++) {
                for (var j = 0; j < this.state[i].length; j++) {
                    content += this.state[i][j] ? 'X' : ' ';
                }
                content += '\n';
            }

            this.container.innerHTML = content;
        }
    }, {
        key: 'subscribeToClick',
        value: function subscribeToClick() {
            var _this = this;

            this.container.addEventListener('click', function (ev) {
                var preWidth = ev.target.clientWidth;
                var preHeight = ev.target.clientHeight;

                var cellWidth = preWidth / _this.state[0].length;
                var cellHeight = preHeight / _this.state.length;

                var x = ev.offsetX;
                var y = ev.offsetY;

                _this.eventBus.trigger('view:cellChanged', {
                    row: Math.floor(y / cellHeight),
                    column: Math.floor(x / cellWidth)
                });
            });
        }
    }, {
        key: 'subscribeToTick',
        value: function subscribeToTick() {
            var _this2 = this;

            this.eventBus.on('stateManager:stateChanged', function (state) {
                _this2.state = state;
                _this2.render();
            });
        }
    }]);

    return TextView;
}();

exports.default = TextView;

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _eventBus = require('../utils/eventBus');

var _eventBus2 = _interopRequireDefault(_eventBus);

var _stateManager = require('../components/stateManager');

var _stateManager2 = _interopRequireDefault(_stateManager);

var _textView = require('../components/textView');

var _textView2 = _interopRequireDefault(_textView);

var _canvasView = require('../components/canvasView');

var _canvasView2 = _interopRequireDefault(_canvasView);

var _svgView = require('../components/svgView');

var _svgView2 = _interopRequireDefault(_svgView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SQUARE_SIZE = 30;

var eventBus = void 0,
    stateManager = void 0;
var content = '<div id="view" class="view"></div><hr><div id="stateManager" class="stateManager"></div>';
var container = document.getElementById('content');

var routes = [{
    name: 'textView',
    match: /(^$|#text)/,
    onEnter: function onEnter() {
        initComponents();

        var textView = new _textView2.default({
            container: "view"
        }, stateManager.currentState, eventBus);
    },
    onLeave: function onLeave() {
        return document.getElementById('view').innerHTML = '';
    }
}, {
    name: 'canvasView',
    match: '#canvas',
    onEnter: function onEnter() {
        initComponents();

        var canvasView = new _canvasView2.default({
            container: "view",
            squareSize: SQUARE_SIZE
        }, stateManager.currentState, eventBus);
    },
    onLeave: function onLeave() {
        return document.getElementById('view').innerHTML = '';
    }
}, {
    name: 'svgView',
    match: '#svg',
    onEnter: function onEnter() {
        initComponents();

        var svgView = new _svgView2.default({
            container: "view",
            squareSize: SQUARE_SIZE
        }, stateManager.currentState, eventBus);
    },
    onLeave: function onLeave() {
        return document.getElementById('view').innerHTML = '';
    }
}, {
    name: 'about',
    match: '#about',
    onBeforeEnter: function onBeforeEnter() {
        return stateManager.stop();
    },
    onEnter: function onEnter() {
        return container.innerHTML = '<div>О сайте</div>';
    },
    onLeave: function onLeave() {
        container.innerHTML = content;
        stateManager && stateManager.init();
    }
}];

function initComponents() {
    if (!eventBus && !stateManager) {
        container.innerHTML = content;

        eventBus = new _eventBus2.default();
        stateManager = new _stateManager2.default({
            container: 'stateManager',
            width: 20,
            height: 10,
            speed: {
                min: 1000,
                max: 5000,
                current: 2000,
                step: 1000
            }
        }, eventBus);
    }
}

exports.default = routes;

},{"../components/canvasView":2,"../components/stateManager":3,"../components/svgView":4,"../components/textView":5,"../utils/eventBus":7}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var listeners = Symbol('listeners');
function EventBus() {
    this[listeners] = {};
}

EventBus.prototype.on = function (event, cb) {
    this[listeners][event] = this[listeners][event] || [];
    this[listeners][event].push(cb);
};

EventBus.prototype.off = function (event, cb) {
    if (!cb) {
        this[listeners][event].splice(0, this[listeners][event].length);
        return;
    }

    this[listeners][event] = (this[listeners][event] || []).filter(function (listener) {
        return listener !== cb;
    });
};

EventBus.prototype.trigger = function (event) {
    if (this[listeners][event]) {
        var args = Array.prototype.slice.call(arguments, 1);
        this[listeners][event].forEach(function (cb) {
            return cb.apply(null, args);
        });
    }
};

EventBus.prototype.once = function (event, cb) {
    var self = this;
    this.on(event, function wrapper() {
        self.off(event, wrapper);
        cb.apply(null, arguments);
    });
};

exports.default = EventBus;

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameLife = function () {
    function GameLife(state) {
        _classCallCheck(this, GameLife);

        this.state = state;
    }

    _createClass(GameLife, [{
        key: "tick",
        value: function tick() {
            var _this = this;

            var resultState = this.state.map(function (row, i) {
                return row.map(function (cell, j) {
                    return _this.isAlive(i, j);
                });
            });

            this.state = resultState;
        }
    }, {
        key: "isAlive",
        value: function isAlive(row, col) {
            var counter = 0;
            for (var i = row - 1; i <= row + 1; i++) {
                for (var j = col - 1; j <= col + 1; j++) {
                    if (i === row && j === col) {
                        continue;
                    }

                    if (this.state[i] && this.state[i][j]) {
                        counter++;
                    }
                }
            }

            if (this.state[row][col]) {
                return counter === 2 || counter === 3;
            }

            return counter === 3;
        }
    }]);

    return GameLife;
}();

exports.default = GameLife;

},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
function Router(routes) {
    this.routes = routes || [];
    this.init();
}

Router.prototype.init = function () {
    var _this = this;

    window.addEventListener('hashchange', function () {
        return _this.handleUrl(window.location.hash);
    });
    this.handleUrl(window.location.hash);
};

Router.prototype.handleUrl = function (url) {
    var _this2 = this;

    var nextRoute = this.findRoute(url);
    var nextRouteParams = this.getUrlParams(nextRoute, url);

    return Promise.resolve().then(function () {
        return _this2.currentRoute && _this2.currentRoute.onLeave && _this2.currentRoute.onLeave(_this2.currentRouteParams);
    }).then(function () {
        return nextRoute && nextRoute.onBeforeEnter && nextRoute.onBeforeEnter(nextRouteParams);
    }).then(function () {
        return nextRoute && nextRoute.onEnter && nextRoute.onEnter(nextRouteParams);
    }).then(function () {
        _this2.currentRoute = nextRoute;
        _this2.currentRouteParams = nextRouteParams;
    });
};

Router.prototype.findRoute = function (url) {
    return this.routes.find(function (route) {
        if (typeof route.match === 'string') {
            return route.match === url;
        }

        if (route.match instanceof RegExp) {
            return route.match.test(url);
        }

        if (typeof route.match === 'function') {
            return route.match(url);
        }
    });
};

Router.prototype.getUrlParams = function (route, url) {
    if (!route) {
        return;
    }

    if (route.match instanceof RegExp) {
        return url.match(route.match);
    }

    if (typeof route.match === 'function') {
        return route.match(url);
    }
};

exports.default = Router;

},{}]},{},[1]);
